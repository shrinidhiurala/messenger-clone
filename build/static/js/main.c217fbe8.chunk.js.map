{"version":3,"sources":["components/Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","username","message","isUser","className","Card","CardContent","Typography","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","FormControl","Input","placeholder","value","onChange","event","target","IconButton","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2SAuBeA,EAnBEC,sBAAW,WAAuBC,GAAS,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,QAC9BC,EAASF,IAAaC,EAAQD,SAEpC,OACI,qBAAKD,IAAKA,EAAKI,UAAS,kBAAaD,GAAU,gBAA/C,SACI,cAACE,EAAA,EAAD,CAAMD,UAAWD,EAAS,oBAAsB,qBAAhD,SACI,cAACG,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CACIC,QAAQ,KACRC,UAAU,KAFd,WAIMN,GAAD,UAAcD,EAAQD,UAAY,UAAlC,KAJL,IAIsDC,EAAQA,oB,QCDnEQ,GAZKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAGRR,IAASS,a,iCCgELC,MAlEf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAIA,EAAgCJ,mBAAS,IAAzC,mBAAOrB,EAAP,KAAiB0B,EAAjB,KA4BA,OA1BAC,qBAAU,WACRlB,EAAGmB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIlC,QAASiC,EAAIE,iBAEjE,IAEHT,qBAAU,WACRD,EAAYW,OAAO,2BAClB,IAiBD,sBAAKlC,UAAU,MAAf,UACE,qBAAKmC,IAAI,6GACT,iDACA,wCAAWtC,KACX,sBAAMG,UAAU,YAAhB,SACE,eAACoC,EAAA,EAAD,CAAapC,UAAU,mBAAvB,UAEE,cAACqC,EAAA,EAAD,CAAOrC,UAAU,kBAAkBsC,YAAY,qBAAqBC,MAAOpB,EAAOqB,SAAU,SAACC,GAAD,OAAWrB,EAASqB,EAAMC,OAAOH,UAE7H,cAACI,EAAA,EAAD,CACE3C,UAAU,kBACVI,QAAQ,YAAYwC,MAAM,UAAUC,KAAK,SAASC,QA1BxC,SAACL,GACnBA,EAAMM,iBAEO,KAAV5B,IACDb,EAAGmB,WAAW,YAAYuB,IAAI,CAC5BlD,QAASqB,EACTtB,SAAUA,EACVoD,UAAW1C,IAASS,UAAUkC,WAAWC,oBAE3C/B,EAAS,MAeL,SAIE,cAAC,IAAD,WAMN,cAAC,IAAD,UAEIC,EAASS,KAAK,gBAAEhC,EAAF,EAAEA,QAASkC,EAAX,EAAWA,GAAX,OACZ,cAAC,EAAD,CAAkBnC,SAAUA,EAAUC,QAASA,GAAjCkC,YCvDXoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c217fbe8.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport { forwardRef } from \"react\";\r\nimport './Message.css'\r\n\r\nconst Message =  forwardRef(({username, message} , ref) => {\r\n    const isUser = username === message.username;\r\n    //console.log(\"message.username\", message.username, isUser)\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message_user'}`}>\r\n            <Card className={isUser ? 'message_user_card' : 'message_guest_card' } >\r\n                <CardContent>\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        component=\"h2\"\r\n                    >\r\n                        {!isUser && `${message.username || 'Unknown'}:`} {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Message;","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAYU-9ScKCQhk6k9cHfWr5PFJ9n_lRVlEM\",\r\n    authDomain: \"messenger-clone-a40da.firebaseapp.com\",\r\n    projectId: \"messenger-clone-a40da\",\r\n    storageBucket: \"messenger-clone-a40da.appspot.com\",\r\n    messagingSenderId: \"85003717033\",\r\n    appId: \"1:85003717033:web:5fe43e1bee2ecbab10dcb8\",\r\n    measurementId: \"G-BWB2RRLTVM\"\r\n});\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport default db;","import { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Message from './components/Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([\n    // {username:'Moahn', message:'Hi'},\n    // {username:'Sowrab', message:'Ssup'},\n  ])\n  const [username, setUsername] = useState('');\n\n  useEffect(()=>{\n    db.collection('messages')\n    .orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()}) ))\n    })\n  }, [])\n  \n  useEffect(()=>{\n    setUsername(prompt('Enter your username!'))\n  }, [])\n  \n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if(input !== ''){\n      db.collection('messages').add({\n        message: input,\n        username: username,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })\n      setInput('');\n    }\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2020/10/Logo_Messenger_NewBlurple-399x399-1.png?w=100&h=100\" />\n      <h1>Messenger-Clone</h1>\n      <h2>Hello {username}</h2>\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n          {/* <InputLabel>Enter a massage...</InputLabel> */}\n          <Input className=\"app__inputField\" placeholder=\"Enter a message...\" value={input} onChange={(event) => setInput(event.target.value)} />\n\n          <IconButton\n            className=\"app__iconButton\"\n            variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessage}\n          >\n            <SendIcon />\n          </IconButton>\n\n        </FormControl>\n      </form>\n      \n      <FlipMove>\n        {\n          messages.map( ({message, id}) =>(\n            <Message key={id} username={username} message={message} />\n          ))\n        }\n      </FlipMove>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}